{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/tikaram/Downloads/projects/Cline/ecommerce/src/lib/store/chatbot-store.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\ntype Message = {\n  role: 'user' | 'assistant';\n  content: string;\n};\n\ntype ChatbotState = {\n  isOpen: boolean;\n  messages: Message[];\n  unreadMessages: number;\n  isLoading: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  addMessage: (message: Message) => void;\n  setUnreadMessages: (count: number) => void;\n  incrementUnreadMessages: () => void;\n  setIsLoading: (isLoading: boolean) => void;\n  clearMessages: () => void;\n};\n\nexport const useChatbotStore = create<ChatbotState>()(\n  persist(\n    (set) => ({\n      isOpen: false,\n      messages: [],\n      unreadMessages: 0,\n      isLoading: false,\n      setIsOpen: (isOpen) => set((state) => ({ isOpen, unreadMessages: isOpen ? 0 : state.unreadMessages })),\n      addMessage: (message) => \n        set((state) => ({ \n          messages: [...state.messages, message],\n          unreadMessages: state.isOpen \n            ? 0 \n            : message.role === 'assistant' \n              ? state.unreadMessages + 1 \n              : state.unreadMessages\n        })),\n      setUnreadMessages: (count) => set({ unreadMessages: count }),\n      incrementUnreadMessages: () => \n        set((state) => ({ unreadMessages: state.unreadMessages + 1 })),\n      setIsLoading: (isLoading) => set({ isLoading }),\n      clearMessages: () => set({ messages: [] }),\n    }),\n    {\n      name: 'chatbot-storage',\n    }\n  )\n);\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAoBO,MAAM,kBAAkB,CAAA,GAAA,2IAAA,CAAA,SAAM,AAAD,IAClC,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EACJ,CAAC,MAAQ,CAAC;QACR,QAAQ;QACR,UAAU,EAAE;QACZ,gBAAgB;QAChB,WAAW;QACX,WAAW,CAAC,SAAW,IAAI,CAAC,QAAU,CAAC;oBAAE;oBAAQ,gBAAgB,SAAS,IAAI,MAAM,cAAc;gBAAC,CAAC;QACpG,YAAY,CAAC,UACX,IAAI,CAAC,QAAU,CAAC;oBACd,UAAU;2BAAI,MAAM,QAAQ;wBAAE;qBAAQ;oBACtC,gBAAgB,MAAM,MAAM,GACxB,IACA,QAAQ,IAAI,KAAK,cACf,MAAM,cAAc,GAAG,IACvB,MAAM,cAAc;gBAC5B,CAAC;QACH,mBAAmB,CAAC,QAAU,IAAI;gBAAE,gBAAgB;YAAM;QAC1D,yBAAyB,IACvB,IAAI,CAAC,QAAU,CAAC;oBAAE,gBAAgB,MAAM,cAAc,GAAG;gBAAE,CAAC;QAC9D,cAAc,CAAC,YAAc,IAAI;gBAAE;YAAU;QAC7C,eAAe,IAAM,IAAI;gBAAE,UAAU,EAAE;YAAC;IAC1C,CAAC,GACD;IACE,MAAM;AACR"}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///Users/tikaram/Downloads/projects/Cline/ecommerce/src/components/chatbot/chatbot-button.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect } from 'react';\nimport { FiMessageCircle } from 'react-icons/fi';\nimport { useChatbotStore } from '../../lib/store/chatbot-store';\n\nexport default function ChatbotButton() {\n  const { isOpen, setIsOpen, unreadMessages } = useChatbotStore();\n\n  // Handle keyboard shortcut (Cmd/Ctrl + /)\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if ((e.metaKey || e.ctrlKey) && e.key === '/') {\n        e.preventDefault();\n        setIsOpen(!isOpen);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, setIsOpen]);\n\n  return (\n    <button\n      onClick={() => setIsOpen(true)}\n      className=\"fixed bottom-6 right-6 z-50 bg-blue-600 hover:bg-blue-700 text-white rounded-full p-4 shadow-lg transition-all duration-200 ease-in-out flex items-center justify-center\"\n      aria-label=\"Open customer support chat\"\n    >\n      <FiMessageCircle className=\"w-6 h-6\" />\n      {unreadMessages > 0 && (\n        <span className=\"absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-6 h-6 flex items-center justify-center\">\n          {unreadMessages}\n        </span>\n      )}\n    </button>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AAEA;AADA;;;AAHA;;;;AAMe,SAAS;;IACtB,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,cAAc,EAAE,GAAG,CAAA,GAAA,0IAAA,CAAA,kBAAe,AAAD;IAE5D,0CAA0C;IAC1C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;mCAAE;YACR,MAAM;yDAAgB,CAAC;oBACrB,IAAI,CAAC,EAAE,OAAO,IAAI,EAAE,OAAO,KAAK,EAAE,GAAG,KAAK,KAAK;wBAC7C,EAAE,cAAc;wBAChB,UAAU,CAAC;oBACb;gBACF;;YAEA,OAAO,gBAAgB,CAAC,WAAW;YACnC;2CAAO,IAAM,OAAO,mBAAmB,CAAC,WAAW;;QACrD;kCAAG;QAAC;QAAQ;KAAU;IAEtB,qBACE,6LAAC;QACC,SAAS,IAAM,UAAU;QACzB,WAAU;QACV,cAAW;;0BAEX,6LAAC,iJAAA,CAAA,kBAAe;gBAAC,WAAU;;;;;;YAC1B,iBAAiB,mBAChB,6LAAC;gBAAK,WAAU;0BACb;;;;;;;;;;;;AAKX;GA9BwB;;QACwB,0IAAA,CAAA,kBAAe;;;KADvC"}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}