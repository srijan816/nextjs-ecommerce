{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/tikaram/Downloads/projects/Cline/ecommerce/src/components/ui/product-card.tsx"],"sourcesContent":["'use client';\n\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { FiShoppingCart } from 'react-icons/fi';\nimport { Product } from '../../lib/api/products';\n\ninterface ProductCardProps {\n  product: Product;\n}\n\nexport default function ProductCard({ product }: ProductCardProps) {\n  const { id, name, price, categoryName, image } = product;\n  \n  return (\n    <div className=\"bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow\">\n      <Link href={`/products/${id}`}>\n        <div className=\"relative h-48 overflow-hidden bg-gray-200\">\n          <Image\n            src={image}\n            alt={name}\n            fill\n            className=\"object-cover hover:scale-105 transition-transform duration-300\"\n          />\n        </div>\n      </Link>\n      \n      <div className=\"p-4\">\n        <Link href={`/products/${id}`} className=\"hover:text-blue-600 transition-colors\">\n          <h3 className=\"font-medium line-clamp-1\">{name}</h3>\n        </Link>\n        <p className=\"text-gray-600 text-sm mb-2\">{categoryName}</p>\n        \n        <div className=\"flex justify-between items-center\">\n          <span className=\"font-bold\">${price.toFixed(2)}</span>\n          <button \n            className=\"flex items-center gap-1 text-sm bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700 transition-colors\"\n            aria-label={`Add ${name} to cart`}\n          >\n            <FiShoppingCart className=\"w-4 h-4\" />\n            <span>Add</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAWe,SAAS,YAAY,EAAE,OAAO,EAAoB;IAC/D,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,GAAG;IAEjD,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,4JAAA,CAAA,UAAI;gBAAC,MAAM,CAAC,UAAU,EAAE,IAAI;0BAC3B,cAAA,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC,6HAAA,CAAA,UAAK;wBACJ,KAAK;wBACL,KAAK;wBACL,IAAI;wBACJ,WAAU;;;;;;;;;;;;;;;;0BAKhB,8OAAC;gBAAI,WAAU;;kCACb,8OAAC,4JAAA,CAAA,UAAI;wBAAC,MAAM,CAAC,UAAU,EAAE,IAAI;wBAAE,WAAU;kCACvC,cAAA,8OAAC;4BAAG,WAAU;sCAA4B;;;;;;;;;;;kCAE5C,8OAAC;wBAAE,WAAU;kCAA8B;;;;;;kCAE3C,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAK,WAAU;;oCAAY;oCAAE,MAAM,OAAO,CAAC;;;;;;;0CAC5C,8OAAC;gCACC,WAAU;gCACV,cAAY,CAAC,IAAI,EAAE,KAAK,QAAQ,CAAC;;kDAEjC,8OAAC,8IAAA,CAAA,iBAAc;wCAAC,WAAU;;;;;;kDAC1B,8OAAC;kDAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMlB"}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["file:///Users/tikaram/Downloads/projects/Cline/ecommerce/src/components/ui/category-card.tsx"],"sourcesContent":["'use client';\n\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { FiArrowRight } from 'react-icons/fi';\nimport { Category } from '../../lib/api/products';\n\ninterface CategoryCardProps {\n  category: Category;\n}\n\nexport default function CategoryCard({ category }: CategoryCardProps) {\n  const { id, name, description, image } = category;\n  \n  return (\n    <div className=\"bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow\">\n      <div className=\"relative h-48 -mt-10 mb-6 rounded-lg overflow-hidden\">\n        <Image\n          src={image}\n          alt={name}\n          fill\n          className=\"object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 to-transparent\" />\n        <h3 className=\"absolute bottom-4 left-4 text-xl font-semibold text-white\">{name}</h3>\n      </div>\n      \n      <p className=\"text-gray-600 mb-4\">{description}</p>\n      \n      <Link\n        href={`/categories/${id}`}\n        className=\"inline-flex items-center text-blue-600 font-medium hover:underline\"\n      >\n        Browse {name}\n        <FiArrowRight className=\"ml-2\" />\n      </Link>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAWe,SAAS,aAAa,EAAE,QAAQ,EAAqB;IAClE,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,GAAG;IAEzC,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC,6HAAA,CAAA,UAAK;wBACJ,KAAK;wBACL,KAAK;wBACL,IAAI;wBACJ,WAAU;;;;;;kCAEZ,8OAAC;wBAAI,WAAU;;;;;;kCACf,8OAAC;wBAAG,WAAU;kCAA6D;;;;;;;;;;;;0BAG7E,8OAAC;gBAAE,WAAU;0BAAsB;;;;;;0BAEnC,8OAAC,4JAAA,CAAA,UAAI;gBACH,MAAM,CAAC,YAAY,EAAE,IAAI;gBACzB,WAAU;;oBACX;oBACS;kCACR,8OAAC,8IAAA,CAAA,eAAY;wBAAC,WAAU;;;;;;;;;;;;;;;;;;AAIhC"}},
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":["file:///Users/tikaram/Downloads/projects/Cline/ecommerce/src/lib/store/chatbot-store.ts"],"sourcesContent":["'use client';\n\nimport { create } from 'zustand';\nimport { createJSONStorage, persist } from 'zustand/middleware';\n\nexport type Message = {\n  role: 'user' | 'assistant';\n  content: string;\n};\n\ntype ChatbotState = {\n  isOpen: boolean;\n  messages: Message[];\n  unreadMessages: number;\n  isLoading: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  addMessage: (message: Message) => void;\n  setUnreadMessages: (count: number) => void;\n  incrementUnreadMessages: () => void;\n  setIsLoading: (isLoading: boolean) => void;\n  clearMessages: () => void;\n};\n\n// Create a store with browser-safe persistence\nexport const useChatbotStore = create<ChatbotState>()(\n  persist(\n    (set) => ({\n      isOpen: false,\n      messages: [],\n      unreadMessages: 0,\n      isLoading: false,\n      setIsOpen: (isOpen) => set((state) => ({ \n        isOpen, \n        unreadMessages: isOpen ? 0 : state.unreadMessages \n      })),\n      addMessage: (message) => \n        set((state) => {\n          console.log('Adding message to store:', message);\n          console.log('Current messages:', state.messages);\n          return { \n            messages: [...state.messages, message],\n            unreadMessages: state.isOpen \n              ? 0 \n              : message.role === 'assistant' \n                ? state.unreadMessages + 1 \n                : state.unreadMessages\n          };\n        }),\n      setUnreadMessages: (count) => set({ unreadMessages: count }),\n      incrementUnreadMessages: () => \n        set((state) => ({ unreadMessages: state.unreadMessages + 1 })),\n      setIsLoading: (isLoading) => set({ isLoading }),\n      clearMessages: () => set({ messages: [] }),\n    }),\n    {\n      name: 'chatbot-storage',\n      storage: createJSONStorage(() => {\n        // Only use localStorage in the browser\n        if (typeof window !== 'undefined') {\n          return localStorage;\n        }\n        // Return a dummy storage for SSR\n        return {\n          getItem: () => null,\n          setItem: () => {},\n          removeItem: () => {},\n        };\n      }),\n    }\n  )\n);\n"],"names":[],"mappings":";;;AAEA;AACA;AAHA;;;AAwBO,MAAM,kBAAkB,CAAA,GAAA,wIAAA,CAAA,SAAM,AAAD,IAClC,CAAA,GAAA,6IAAA,CAAA,UAAO,AAAD,EACJ,CAAC,MAAQ,CAAC;QACR,QAAQ;QACR,UAAU,EAAE;QACZ,gBAAgB;QAChB,WAAW;QACX,WAAW,CAAC,SAAW,IAAI,CAAC,QAAU,CAAC;oBACrC;oBACA,gBAAgB,SAAS,IAAI,MAAM,cAAc;gBACnD,CAAC;QACD,YAAY,CAAC,UACX,IAAI,CAAC;gBACH,QAAQ,GAAG,CAAC,4BAA4B;gBACxC,QAAQ,GAAG,CAAC,qBAAqB,MAAM,QAAQ;gBAC/C,OAAO;oBACL,UAAU;2BAAI,MAAM,QAAQ;wBAAE;qBAAQ;oBACtC,gBAAgB,MAAM,MAAM,GACxB,IACA,QAAQ,IAAI,KAAK,cACf,MAAM,cAAc,GAAG,IACvB,MAAM,cAAc;gBAC5B;YACF;QACF,mBAAmB,CAAC,QAAU,IAAI;gBAAE,gBAAgB;YAAM;QAC1D,yBAAyB,IACvB,IAAI,CAAC,QAAU,CAAC;oBAAE,gBAAgB,MAAM,cAAc,GAAG;gBAAE,CAAC;QAC9D,cAAc,CAAC,YAAc,IAAI;gBAAE;YAAU;QAC7C,eAAe,IAAM,IAAI;gBAAE,UAAU,EAAE;YAAC;IAC1C,CAAC,GACD;IACE,MAAM;IACN,SAAS,CAAA,GAAA,6IAAA,CAAA,oBAAiB,AAAD,EAAE;QACzB,uCAAuC;QACvC,uCAAmC;;QAEnC;QACA,iCAAiC;QACjC,OAAO;YACL,SAAS,IAAM;YACf,SAAS,KAAO;YAChB,YAAY,KAAO;QACrB;IACF;AACF"}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file:///Users/tikaram/Downloads/projects/Cline/ecommerce/src/components/chatbot/chatbot-button.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect } from 'react';\nimport { FiMessageCircle } from 'react-icons/fi';\nimport { useChatbotStore } from '../../lib/store/chatbot-store';\n\nexport default function ChatbotButton() {\n  const { isOpen, setIsOpen, unreadMessages } = useChatbotStore();\n\n  // Handle keyboard shortcut (Cmd/Ctrl + /)\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if ((e.metaKey || e.ctrlKey) && e.key === '/') {\n        e.preventDefault();\n        setIsOpen(!isOpen);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, setIsOpen]);\n\n  return (\n    <button\n      onClick={() => setIsOpen(true)}\n      className=\"fixed bottom-6 right-6 z-50 bg-blue-600 hover:bg-blue-700 text-white rounded-full p-4 shadow-lg transition-all duration-200 ease-in-out flex items-center justify-center\"\n      aria-label=\"Open customer support chat\"\n    >\n      <FiMessageCircle className=\"w-6 h-6\" />\n      {unreadMessages > 0 && (\n        <span className=\"absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-6 h-6 flex items-center justify-center\">\n          {unreadMessages}\n        </span>\n      )}\n    </button>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AAEA;AADA;AAHA;;;;;AAMe,SAAS;IACtB,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,cAAc,EAAE,GAAG,CAAA,GAAA,uIAAA,CAAA,kBAAe,AAAD;IAE5D,0CAA0C;IAC1C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,gBAAgB,CAAC;YACrB,IAAI,CAAC,EAAE,OAAO,IAAI,EAAE,OAAO,KAAK,EAAE,GAAG,KAAK,KAAK;gBAC7C,EAAE,cAAc;gBAChB,UAAU,CAAC;YACb;QACF;QAEA,OAAO,gBAAgB,CAAC,WAAW;QACnC,OAAO,IAAM,OAAO,mBAAmB,CAAC,WAAW;IACrD,GAAG;QAAC;QAAQ;KAAU;IAEtB,qBACE,8OAAC;QACC,SAAS,IAAM,UAAU;QACzB,WAAU;QACV,cAAW;;0BAEX,8OAAC,8IAAA,CAAA,kBAAe;gBAAC,WAAU;;;;;;YAC1B,iBAAiB,mBAChB,8OAAC;gBAAK,WAAU;0BACb;;;;;;;;;;;;AAKX"}},
    {"offset": {"line": 345, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 351, "column": 0}, "map": {"version":3,"sources":["file:///Users/tikaram/Downloads/projects/Cline/ecommerce/src/components/chatbot/chatbot-dialog.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useRef, useEffect } from 'react';\nimport { FiSend, FiX } from 'react-icons/fi';\nimport { useChat } from 'ai/react';\nimport { useChatbotStore, Message as StoreMessage } from '../../lib/store/chatbot-store';\n\nexport default function ChatbotDialog() {\n  const { \n    isOpen, \n    setIsOpen, \n    messages: storeMessages, \n    addMessage, \n    clearMessages \n  } = useChatbotStore();\n  \n  const [input, setInput] = useState('');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Use the Vercel AI SDK's useChat hook\n  const {\n    messages,\n    input: aiInput,\n    handleInputChange,\n    handleSubmit,\n    isLoading,\n    error\n  } = useChat({\n    api: '/api/chatbot',\n    streamProtocol: 'text', // Add this line to fix stream parsing issues\n    onFinish: (message) => {\n      // Add the assistant's message to the store for persistence\n      addMessage({ role: 'assistant', content: message.content });\n    }\n  });\n\n  // Sync input state with AI SDK\n  useEffect(() => {\n    setInput(aiInput);\n  }, [aiInput]);\n\n  // Sync store messages with AI SDK on initial load\n  useEffect(() => {\n    if (storeMessages.length > 0 && messages.length === 0) {\n      // The messages from the store are already in the UI\n      console.log('Loaded messages from store:', storeMessages);\n    }\n  }, [storeMessages, messages]);\n\n  // Scroll to bottom of messages when new message is added\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages, storeMessages]);\n\n  // Handle sending a message\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!input.trim() || isLoading) return;\n    \n    console.log('Sending message:', input);\n    \n    // Add user message to store for persistence\n    const userMessage: StoreMessage = { role: 'user', content: input };\n    addMessage(userMessage);\n    \n    // Use the AI SDK to handle the submission\n    handleSubmit(e);\n  };\n\n  // Display error if there is one\n  useEffect(() => {\n    if (error) {\n      console.error('Chat error:', error);\n      addMessage({ \n        role: 'assistant', \n        content: \"Sorry, I'm having trouble connecting right now. Please try again later.\"\n      });\n    }\n  }, [error, addMessage]);\n\n  if (!isOpen) return null;\n\n  // Determine which messages to display - use store messages for persistence\n  const displayMessages = storeMessages.length > 0 ? storeMessages : messages;\n\n  return (\n    <div className=\"fixed bottom-24 right-6 z-50 w-96 max-w-[calc(100vw-2rem)] h-[32rem] max-h-[calc(100vh-10rem)] bg-white rounded-lg shadow-xl flex flex-col overflow-hidden border border-gray-200\">\n      {/* Chat header */}\n      <div className=\"bg-blue-600 text-white px-4 py-3 flex justify-between items-center\">\n        <h3 className=\"font-medium\">Customer Support</h3>\n        <button \n          onClick={() => setIsOpen(false)}\n          className=\"text-white hover:text-gray-200 transition-colors\"\n          aria-label=\"Close chat\"\n        >\n          <FiX className=\"w-5 h-5\" />\n        </button>\n      </div>\n      \n      {/* Chat messages */}\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n        {displayMessages.length === 0 ? (\n          <div className=\"text-center text-gray-500 py-8\">\n            <p>Welcome to customer support! How can I help you today?</p>\n          </div>\n        ) : (\n          displayMessages.map((message, index) => (\n            <div \n              key={index} \n              className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n            >\n              <div className={`max-w-[75%] rounded-lg px-4 py-2 ${\n                message.role === 'user' \n                  ? 'bg-blue-600 text-white' \n                  : 'bg-gray-100 text-gray-800'\n              }`}>\n                <p className=\"whitespace-pre-wrap\">{message.content}</p>\n              </div>\n            </div>\n          ))\n        )}\n        \n        {isLoading && (\n          <div className=\"flex justify-start\">\n            <div className=\"bg-gray-100 rounded-lg px-4 py-2 max-w-[75%]\">\n              <div className=\"flex space-x-2 items-center\">\n                <div className=\"w-2 h-2 rounded-full bg-gray-400 animate-pulse\"></div>\n                <div className=\"w-2 h-2 rounded-full bg-gray-400 animate-pulse delay-75\"></div>\n                <div className=\"w-2 h-2 rounded-full bg-gray-400 animate-pulse delay-150\"></div>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        <div ref={messagesEndRef} />\n      </div>\n      \n      {/* Chat input */}\n      <form onSubmit={handleSendMessage} className=\"border-t border-gray-200 p-4\">\n        <div className=\"flex items-center\">\n          <input\n            type=\"text\"\n            value={input}\n            onChange={(e) => {\n              setInput(e.target.value);\n              handleInputChange(e);\n            }}\n            placeholder=\"Type your message...\"\n            className=\"flex-1 border border-gray-300 rounded-l-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-600\"\n          />\n          <button\n            type=\"submit\"\n            disabled={!input.trim() || isLoading}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-r-md transition-colors disabled:bg-blue-400\"\n          >\n            <FiSend className=\"w-5 h-5\" />\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 623, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 629, "column": 0}, "map": {"version":3,"sources":["file:///Users/tikaram/Downloads/projects/Cline/ecommerce/src/components/chatbot/chatbot-wrapper.tsx"],"sourcesContent":["'use client';\n\nimport ChatbotButton from './chatbot-button';\nimport ChatbotDialog from './chatbot-dialog';\n\nexport default function ChatbotWrapper() {\n  return (\n    <>\n      <ChatbotButton />\n      <ChatbotDialog />\n    </>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAKe,SAAS;IACtB,qBACE;;0BACE,8OAAC,kJAAA,CAAA,UAAa;;;;;0BACd,8OAAC,kJAAA,CAAA,UAAa;;;;;;;AAGpB"}},
    {"offset": {"line": 655, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}