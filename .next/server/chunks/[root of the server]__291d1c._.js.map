{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["file:///Users/tikaram/Downloads/projects/Cline/ecommerce/src/app/api/chatbot/route.ts"],"sourcesContent":["import { OpenAI } from 'openai';\n\n// Create an OpenAI API client\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\n// Set the system prompt for the chatbot\nconst systemPrompt = `\nYou are a helpful customer support assistant for an eCommerce store called NextCommerce.\nYour goal is to provide friendly, concise, and accurate information to customers.\n\nHere are some key details about our store:\n- We offer free shipping on orders over $50\n- Standard delivery takes 3-5 business days\n- Express shipping is available for an additional fee\n- Our return policy allows returns within 30 days for a full refund\n- We accept all major credit cards, PayPal, and Apple Pay\n- For customer support: support@example.com or 1-800-123-4567 (9 AM - 5 PM ET, Monday to Friday)\n- Use code WELCOME10 for 10% off your first order\n- We have a price match guarantee for identical items found at lower prices elsewhere\n\nAlways be helpful, concise, and friendly in your responses.\n`;\n\n// This function converts an OpenAI stream to a raw text stream\n// compatible with the Vercel AI SDK when using streamProtocol: 'text'\nfunction createRawTextStream(stream: AsyncIterable<any>) {\n  const encoder = new TextEncoder();\n  \n  return new ReadableStream({\n    async start(controller) {\n      // Process each chunk from the OpenAI stream\n      for await (const chunk of stream) {\n        const content = chunk.choices[0]?.delta?.content || '';\n        if (content) {\n          // When using streamProtocol: 'text', we just need to send the raw text\n          controller.enqueue(encoder.encode(content));\n        }\n      }\n      \n      // Close the stream when done\n      controller.close();\n    },\n  });\n}\n\nexport async function POST(req: Request) {\n  try {\n    // Parse the request body\n    const { messages } = await req.json();\n    \n    // Validate the messages\n    if (!messages || !Array.isArray(messages) || messages.length === 0) {\n      return new Response(\n        JSON.stringify({ error: 'Invalid request body. Expected an array of messages.' }),\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n    \n    // Add the system prompt to the messages\n    const messagesWithSystemPrompt = [\n      { role: 'system', content: systemPrompt },\n      ...messages\n    ];\n    \n    // Call the OpenAI API\n    const response = await openai.chat.completions.create({\n      model: 'gpt-3.5-turbo',\n      messages: messagesWithSystemPrompt,\n      stream: true,\n      temperature: 0.7,\n      max_tokens: 500,\n    });\n    \n    // Convert the response to a raw text stream\n    const stream = createRawTextStream(response);\n    \n    // Return the stream with the correct headers for text streaming\n    return new Response(stream, {\n      headers: {\n        'Content-Type': 'text/plain; charset=utf-8',\n        'Cache-Control': 'no-cache',\n        'Connection': 'keep-alive',\n      },\n    });\n  } catch (error) {\n    console.error('Error in chatbot API:', error);\n    return new Response(\n      JSON.stringify({ error: 'Failed to process chatbot request' }),\n      { status: 500, headers: { 'Content-Type': 'application/json' } }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,8BAA8B;AAC9B,MAAM,SAAS,IAAI,kJAAA,CAAA,SAAM,CAAC;IACxB,QAAQ,QAAQ,GAAG,CAAC,cAAc;AACpC;AAEA,wCAAwC;AACxC,MAAM,eAAe,CAAC;;;;;;;;;;;;;;;AAetB,CAAC;AAED,+DAA+D;AAC/D,sEAAsE;AACtE,SAAS,oBAAoB,MAA0B;IACrD,MAAM,UAAU,IAAI;IAEpB,OAAO,IAAI,eAAe;QACxB,MAAM,OAAM,UAAU;YACpB,4CAA4C;YAC5C,WAAW,MAAM,SAAS,OAAQ;gBAChC,MAAM,UAAU,MAAM,OAAO,CAAC,EAAE,EAAE,OAAO,WAAW;gBACpD,IAAI,SAAS;oBACX,uEAAuE;oBACvE,WAAW,OAAO,CAAC,QAAQ,MAAM,CAAC;gBACpC;YACF;YAEA,6BAA6B;YAC7B,WAAW,KAAK;QAClB;IACF;AACF;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,yBAAyB;QACzB,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAEnC,wBAAwB;QACxB,IAAI,CAAC,YAAY,CAAC,MAAM,OAAO,CAAC,aAAa,SAAS,MAAM,KAAK,GAAG;YAClE,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAuD,IAC/E;gBAAE,QAAQ;gBAAK,SAAS;oBAAE,gBAAgB;gBAAmB;YAAE;QAEnE;QAEA,wCAAwC;QACxC,MAAM,2BAA2B;YAC/B;gBAAE,MAAM;gBAAU,SAAS;YAAa;eACrC;SACJ;QAED,sBAAsB;QACtB,MAAM,WAAW,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACpD,OAAO;YACP,UAAU;YACV,QAAQ;YACR,aAAa;YACb,YAAY;QACd;QAEA,4CAA4C;QAC5C,MAAM,SAAS,oBAAoB;QAEnC,gEAAgE;QAChE,OAAO,IAAI,SAAS,QAAQ;YAC1B,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB;gBACjB,cAAc;YAChB;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,OAAO;QAAoC,IAC5D;YAAE,QAAQ;YAAK,SAAS;gBAAE,gBAAgB;YAAmB;QAAE;IAEnE;AACF"}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}