{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/tikaram/Downloads/projects/Cline/ecommerce/src/app/api/chatbot/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\n// Define the message type\ntype Message = {\n  role: 'user' | 'assistant';\n  content: string;\n};\n\n// Mock function to simulate OpenAI API call\n// In a real implementation, you would call the OpenAI API here\nasync function getChatbotResponse(messages: Message[]): Promise<string> {\n  try {\n    // Simulate API latency\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Get the last user message\n    const lastMessage = messages[messages.length - 1];\n    \n    // Ensure we have a valid message\n    if (!lastMessage || lastMessage.role !== 'user' || !lastMessage.content) {\n      return \"I'm sorry, I couldn't understand your message. Could you please try again?\";\n    }\n    \n    const userQuery = lastMessage.content.toLowerCase();\n    \n    // Simple response logic based on keywords\n    if (userQuery.includes('hello') || userQuery.includes('hi')) {\n      return \"Hello! Welcome to our eCommerce store. How can I assist you today?\";\n    } else if (userQuery.includes('shipping') || userQuery.includes('delivery')) {\n      return \"We offer free shipping on orders over $50. Standard delivery takes 3-5 business days, and express shipping is available for an additional fee.\";\n    } else if (userQuery.includes('return') || userQuery.includes('refund')) {\n      return \"Our return policy allows you to return items within 30 days of delivery for a full refund. Please visit our Returns page for more details.\";\n    } else if (userQuery.includes('payment') || userQuery.includes('pay')) {\n      return \"We accept all major credit cards, PayPal, and Apple Pay. Your payment information is securely processed and never stored on our servers.\";\n    } else if (userQuery.includes('contact') || userQuery.includes('support')) {\n      return \"You can reach our customer support team at support@example.com or call us at 1-800-123-4567 during business hours (9 AM - 5 PM ET, Monday to Friday).\";\n    } else if (userQuery.includes('discount') || userQuery.includes('coupon')) {\n      return \"You can use the code WELCOME10 for 10% off your first order. We also regularly offer seasonal discounts to our newsletter subscribers.\";\n    } else if (userQuery.includes('thanks') || userQuery.includes('thank you')) {\n      return \"You're welcome! Is there anything else I can help you with?\";\n    } else if (userQuery.includes('product') || userQuery.includes('item')) {\n      return \"We offer a wide range of products across multiple categories. You can browse our catalog by category or use the search function to find specific items. Is there a particular product you're looking for?\";\n    } else if (userQuery.includes('price') || userQuery.includes('cost')) {\n      return \"Our products are competitively priced and we regularly offer discounts and promotions. You can find the price of each item on its product page. We also have a price match guarantee for identical items found at lower prices elsewhere.\";\n    } else {\n      return \"Thank you for your message. I'd be happy to help with that. Could you provide more details so I can assist you better?\";\n    }\n  } catch (error) {\n    console.error('Error getting chatbot response:', error);\n    return \"Sorry, I'm having trouble processing your request right now. Please try again later.\";\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    // Parse the incoming request\n    const body = await request.json();\n    const { messages } = body;\n    \n    // Validate the messages\n    if (!messages || !Array.isArray(messages) || messages.length === 0) {\n      return NextResponse.json(\n        { error: 'Invalid request body. Expected an array of messages.' },\n        { status: 400 }\n      );\n    }\n    \n    // Get a response from the chatbot\n    const response = await getChatbotResponse(messages);\n    \n    // Return the response\n    return NextResponse.json({ response });\n  } catch (error) {\n    console.error('Error in chatbot API:', error);\n    return NextResponse.json(\n      { error: 'Failed to process chatbot request' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAQA,4CAA4C;AAC5C,+DAA+D;AAC/D,eAAe,mBAAmB,QAAmB;IACnD,IAAI;QACF,uBAAuB;QACvB,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;QAEjD,4BAA4B;QAC5B,MAAM,cAAc,QAAQ,CAAC,SAAS,MAAM,GAAG,EAAE;QAEjD,iCAAiC;QACjC,IAAI,CAAC,eAAe,YAAY,IAAI,KAAK,UAAU,CAAC,YAAY,OAAO,EAAE;YACvE,OAAO;QACT;QAEA,MAAM,YAAY,YAAY,OAAO,CAAC,WAAW;QAEjD,0CAA0C;QAC1C,IAAI,UAAU,QAAQ,CAAC,YAAY,UAAU,QAAQ,CAAC,OAAO;YAC3D,OAAO;QACT,OAAO,IAAI,UAAU,QAAQ,CAAC,eAAe,UAAU,QAAQ,CAAC,aAAa;YAC3E,OAAO;QACT,OAAO,IAAI,UAAU,QAAQ,CAAC,aAAa,UAAU,QAAQ,CAAC,WAAW;YACvE,OAAO;QACT,OAAO,IAAI,UAAU,QAAQ,CAAC,cAAc,UAAU,QAAQ,CAAC,QAAQ;YACrE,OAAO;QACT,OAAO,IAAI,UAAU,QAAQ,CAAC,cAAc,UAAU,QAAQ,CAAC,YAAY;YACzE,OAAO;QACT,OAAO,IAAI,UAAU,QAAQ,CAAC,eAAe,UAAU,QAAQ,CAAC,WAAW;YACzE,OAAO;QACT,OAAO,IAAI,UAAU,QAAQ,CAAC,aAAa,UAAU,QAAQ,CAAC,cAAc;YAC1E,OAAO;QACT,OAAO,IAAI,UAAU,QAAQ,CAAC,cAAc,UAAU,QAAQ,CAAC,SAAS;YACtE,OAAO;QACT,OAAO,IAAI,UAAU,QAAQ,CAAC,YAAY,UAAU,QAAQ,CAAC,SAAS;YACpE,OAAO;QACT,OAAO;YACL,OAAO;QACT;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO;IACT;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,6BAA6B;QAC7B,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,QAAQ,EAAE,GAAG;QAErB,wBAAwB;QACxB,IAAI,CAAC,YAAY,CAAC,MAAM,OAAO,CAAC,aAAa,SAAS,MAAM,KAAK,GAAG;YAClE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuD,GAChE;gBAAE,QAAQ;YAAI;QAElB;QAEA,kCAAkC;QAClC,MAAM,WAAW,MAAM,mBAAmB;QAE1C,sBAAsB;QACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAS;IACtC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAoC,GAC7C;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}